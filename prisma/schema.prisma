generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model User {
    id          String      @id @default(uuid())
    username    String      @unique
    password    String
    role        Role        @default(BASIC)
    directories Directory[]
    ShareLink   ShareLink[]
}

model Directory {
    id        String      @id @default(uuid())
    name      String
    type      DocTypes    @default(DIRECTORY)
    createdAt DateTime    @default(now())
    user      User        @relation(fields: [userId], references: [id])
    userId    String
    files     File[]
    parent    Directory?  @relation("DirectoryChildren", fields: [parentId], references: [id], onDelete: Cascade) // Link to parent dir
    parentId  String?
    children  Directory[] @relation("DirectoryChildren")
    shareLink ShareLink[]

    @@unique([parentId, name], name: "unique_name_in_parent_dir")
}

model File {
    id          String      @id @default(uuid())
    name        String
    size        Float
    extension   String      @default("")
    type        DocTypes    @default(FILE)
    createdAt   DateTime    @default(now())
    directory   Directory   @relation(fields: [directoryId], references: [id], onDelete: Cascade)
    directoryId String
    path        String?
    shareLink   ShareLink[]

    @@unique([directoryId, name], name: "unique_name_in_directory")
}

model ShareLink {
    id          String   @id @default(uuid())
    expiresAt   DateTime
    itemType    DocTypes
    directoryId String?
    fileId      String?
    ownerId     String

    directory Directory? @relation(fields: [directoryId], references: [id], onDelete: Cascade)
    file      File?      @relation(fields: [fileId], references: [id], onDelete: Cascade)
    user      User?      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    @@index([directoryId, fileId], name: "directory_or_file_index")
}

enum Role {
    BASIC
    ADMIN
}

enum DocTypes {
    FILE
    DIRECTORY
}
